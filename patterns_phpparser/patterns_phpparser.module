<?php

define('PATTERNS_FORMAT_PHP', 'php');

// Implements hook patterns_parser_add
function patterns_phpparser_patterns_parser() {
	$parser = array();
	$parser['format'] = PATTERNS_FORMAT_PHP;
	$parser['parser'] = 'patterns_phpparser';
	//$parser['overwrite'] = TRUE; // default is TRUE
	return $parser;
}

/**
 * Loads and parases a YAML pattern from file.
 *
 * @param string $path The path to the pattern file.
 * @param bool $local (optional) TRUE if the pattern
 *   file is local. Defaults to TRUE.
 *
 * @return array|bool The pattern structure, or FALSE.
 */
function patterns_phpparser_load($path, $local = TRUE) {
  if ($local && !file_exists($path)) {
    return FALSE;
  }

  if (!$php = file_get_contents($path)) {
    return FALSE;
  }

  return patterns_phpparser_parse($php);
}

/**
 * @depracated
 *
 */
function patterns_phpparser_load_old($path, $local = TRUE) {
  if ($local && !file_exists($path)) {
    return FALSE;
  }
  $pattern = array();

  include($path);
  // That should have declared a 'pattern' into current scope.

  if (!patterns_validate_pattern($pattern)) {
    // TODO: why not drupal_set_message?
    trigger_error(t("Failed to evaluate a useful pattern from the input file %path. Pattern did not validate. May have been invalid syntax.", array('%path' => $path)), E_USER_WARNING);
    return FALSE;
  }
  return $pattern;
}


/**
 * Parses a string containing a PHP array and returns
 * the array.
 *
 * @param array $pattern The pattern string to convert array.
 *
 */
function patterns_phpparser_parse($pattern = NULL) {
	if (is_null($pattern)) return FALSE;
	if (is_array($pattern)) return $pattern;
  if (!is_string($pattern)) return FALSE;

  $outout = array();
  parse_str($pattern, $output);
  return $output;
}

/**
 * Converts an array representing a pattern into a YAML string.
 *
 * @param array $pattern The pattern to convert into a YAML string
 */
function patterns_phpparser_dump($pattern = NULL) {
	if (is_null($pattern) || !is_array($pattern)) return FALSE;
    
    $string = '';
   // foreach ($subs as $key => $value) {
    $string = "\$pattern = " . var_export($pattern, TRUE) . ";\n"; 
 //   }
 return $string;

 //return print_r($string, TRUE);
}
